#summary Come usarlo e testarlo
#sidebar sideNavigation
#labels Phase-Deploy,Featured,Phase-QA

=Indice=
<wiki:toc max_depth="3" />

=Esempi d'uso=
In questa sezione vi farò vedere come è necessario configurare `engine_cudamrg` per usarlo nel modo migliore.
==Per programmatori==
Questa sezione è nel mio elenco di cose da fare, la scriverò non appena avrò tempo a disposizione.
==Per utenti==
Con la versione 0.1.0 di `engine_cudamrg` è necessario ricompilare l'OpenSSL toolkit modificando un paio di file sorgenti con l'utility patch per avere lo speedup che un dispositivo abilitato CUDA è in grado di garantire.

Nel seguente esempio procederemo a scaricare, modificare, compilare e installare l'OpenSSL tookit, useremo `/opt` come directory d'installazione sia per l'OpenSSL toolkit che per l'`engine_cudamrg` ma è possibile scegliere qualsiasi directory di destinazione vogliate.
{{{
 $ wget http://www.openssl.org/source/openssl-0.9.8k.tar.gz
 $ wget http://engine-cuda.googlecode.com/files/engine_cudamrg-v_0.1.0.tar.gz
 $ tar xvzf openssl-0.9.8k.tar.gz 
 $ tar xvzf engine_cudamrg-v_0.1.0.tar.gz 
 $ patch ./openssl-0.9.8k/apps/speed.c ./engine_cudamrg/openssl-patch/openssl-0.9.8.k-apps_speed.c.patch 
 $ patch ./openssl-0.9.8k/crypto/evp/bio_enc.c ./engine_cudamrg/openssl-patch/openssl-0.9.8.k-crypto_evp_bio_c.c.patch 
 $ cd openssl-0.9.8k/
 $ ./config --prefix=/opt
 $ make
 $ sudo make install
 $ cd ../engine_cudamrg/
 $ ./configure --prefix=/opt
 $ make
 $ sudo make install
 $ /opt/bin/openssl engine -vvvv cudamrg -c
}}}
Si può riassumere quanto fatto precedentemente con la seguente lista:
 # scaricare sia l'OpenSSL toolkit che l'`engine_cudamrg`
 # decomprimere i file scaricati
 # applicare le modifiche ai due file scaricati
 # configurare, compilare e installare l'OpenSSL toolkit
 # configurare, compilare e installare l'`engine_cudamrg`
 # verificare che tutto sia andato per il verso giusto

Da notare che nel precedente esempio non sono state compilate le librerie condivise dell'OpenSSL toolkit, se volete compilare anche le librerie condivise è necessario aggiungere l'opzione `shared` al comando `config` ma ricordatevi di modificare `LD_LIBRARY_PATH` in modo da includere la directory con le librerie modificate prima di quella contenente quelle originali.
{{{ 
 $ /opt/bin/openssl speed -engine cudamrg -evp aes-256-ecb
...
}}}
La dimensione desiderata del buffer sarà quello con la velocità maggiore. 
{{{
 $ /opt/bin/openssl enc -engine cudamrg -e -aes-256-ecb -v -bufsize $DESIGNATED_BUFFER_SIZE -k $KEY -in $IN_FILE -out $OUT_FILE
}}}
Per cercare la dimensione del buffer che meglio si adatta al vostro dispositivo abilitato CUDA è necessario utilizzare la versione modificata di speed che avete compilato, probabilmente la dimensione del buffer migliore sarà fra 256KB e 2MB dipendentemente dal vostro hardware.

Ora è possibile usare e testare l'engine ma ricordatevi di utilizzare la dimensione del buffer che meglio si adatta al vostro dispositivo abilitato CUDA in altro caso potreste avere prestazioni peggiori di quelle ottenibili utilizzando il processore.

*NOTA:* in questo esempio ho utilizzato la versione 0.9.8k dell'OpenSSL toolkit semplicemente perchè è quella fornita con la mia distribuzione.
=Come usare la test suite=
Usare la test suite fornita con i sorgenti è abbastanza semplice.
==Eseguire test-enc==
La directory `test-enc` contiene tre script di shell che eseguono il test e scrivono il risultato su disco più altri quattro script che diagrammano il risultato.

Se avete l'`engine_cudamrg` e la versione ricompilata di OpenSSL impostate correttamente è sufficiente cambiare la variabile 'OPENSSL' all'interno degli script `test-enc-cpu.sh` e `test-enc-gpu.sh` in modo che contenga il percorso all'eseguibile openssl.

Dopodichè è necessario eseguire `test-enc-gpu.sh`, ricompilare l'engine con l'opzione `--enable-cpuonly`, eseguire lo script `test-enc-cpu.sh` ed eseguire lo script `test-enc-plot.sh` per diagrammare i risultati. Alla fine ricordatevi di ricompilare l'engine senza l'opzione `--enable-cpuonly`.

Questi script di shell producono come output 24 file, 4 per per ogni cifrario (cifratura e decifratura, sia per CPU che per GPU), al termine è possibile diagrammare i risultati se volete.

==Eseguire test-speed==
La directory `test-speed` contiene tre script di shell che eseguono il test e scrivono il risultato su disco più altri quattro script che diagrammano il risultato.

Se avete l'`engine_cudamrg` e la versione ricompilata di OpenSSL impostate correttamente l'unica cosa che dovete fare è modificare la variabile 'OPENSSL' in modo che contenga il percorso all'eseguibile di openssl.

Questi script di shell producono come output 24 file, 4 per per ogni cifrario (cifratura e decifratura, sia per CPU che per GPU), alla fine diagrammano i risultati.
